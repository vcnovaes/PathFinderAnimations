"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function defaultComparator(a, b) {
  return a - b;
}

var PriorityQueue = function () {
  function PriorityQueue() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, PriorityQueue);

    this._data = [];
    this.comparator = params.comparator || defaultComparator;
  }

  _createClass(PriorityQueue, [{
    key: "push",
    value: function push(item) {
      this._push(item);
    }
  }, {
    key: "peek",
    value: function peek() {
      return this._data[0];
    }
  }, {
    key: "pop",
    value: function pop() {
      return this._data.pop();
    }
  }, {
    key: "shift",
    value: function shift() {
      return this._data.shift();
    }
  }, {
    key: "slice",
    value: function slice(begin, end) {
      return this._data.slice(begin, end);
    }
  }, {
    key: "copy",
    value: function copy() {
      return this._data.slice();
    }
  }, {
    key: "forEach",
    value: function forEach(cb) {
      return this._data.forEach(cb);
    }
  }, {
    key: "map",
    value: function map(cb) {
      return this._data.map(cb);
    }

    /**
     * TODO: Fix this ugly code and write benchmark
     * Maybe I should just use `Array.sort`?
     */

  }, {
    key: "_push",
    value: function _push(item) {
      if (this.length === 0) {
        this._data.push(item);
        return;
      }

      if (this.length < 3) {
        this._data.push(item);
        this._data.sort(this.comparator);
        return;
      }

      var leftPos = 0;
      var rightPos = this.length - 1;

      while (rightPos - leftPos > 1) {
        var midPos = Math.floor((leftPos + rightPos) / 2);

        if (this.comparator(item, this._data[midPos]) < 0) {
          rightPos = midPos;
        } else {
          leftPos = midPos;
        }
      }

      if (this.comparator(item, this._data[leftPos]) <= 0) {
        this._data = [item].concat(_toConsumableArray(this._data));
        return;
      } else if (this.comparator(item, this._data[rightPos]) >= 0) {
        this._data.push(item);
        return;
      }

      var left = this._data.slice(0, leftPos + 1);
      var right = this._data.slice(leftPos + 1);
      this._data = [].concat(_toConsumableArray(left), [item], _toConsumableArray(right));
    }
  }, {
    key: Symbol.iterator,
    value: function value() {
      var current = 0;
      var thisData = this._data;
      var len = thisData.length;
      return {
        next: function next() {
          if (current < len) {
            var idx = current;
            current += 1;
            return {
              value: thisData[idx],
              done: false
            };
          }
          return { done: true };
        }
      };
    }
  }, {
    key: "length",
    get: function get() {
      return this._data.length;
    }
  }]);

  return PriorityQueue;
}();

module.exports = PriorityQueue;